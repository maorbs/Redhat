kind: Deployment
apiVersion: apps/v1
metadata:
# set your user name
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels:
# set your user name
      app: {{ .Release.Name }}
  template:
    metadata:
      annotations:
          checksum/config: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha256sum }}
      labels:
# set your user name
        app: {{ .Release.Name }}
    spec:
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: {{ .Release.Name }}
          env:
            - name: PORT
              value: {{ .Values.containers.containerPort | quote }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }} # /health/readiness # this check the application url path
              port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }} # 1 the time is waiting befor testing the application path
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }} # 1 the time for timeout
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }} # 10 # the abount of time to wait between checks
            successThreshold: {{ .Values.probes.readiness.successThreshold }} # 1 # count to decalre seccessfull 
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }} # 3 # count to decalre failure
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }} #/health/liveliness
              port: {{ .Values.containers.containerPort }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }} # 1
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }} #1
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }} #10
            successThreshold: {{ .Values.probes.readiness.successThreshold }} #1
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }} #3
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: IfNotPresent
# update with the iamge you build in part 1
          image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
          volumeMounts:
            - name: index-html
              mountPath: {{ .Values.volume.mount.path }} # /tmp/html # this will mount the html.index file to it application location
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: index-html
          configMap:
            name: index.html
            defaultMode: 420
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10